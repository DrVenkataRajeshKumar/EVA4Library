# -*- coding: utf-8 -*-
"""DNN15

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1iqsQHnOo6n7k4ajqt82oPmk1TVwS4qZM
"""

from datetime import datetime 
print("Current Date/Time: ", datetime.now())

from torchsummary import summary
import torch
import torch.nn as nn
import torch.nn.functional as F
from eva4modeltrainer import ModelTrainer

class Net(nn.Module):
    """
    Base network that defines helper functions, summary and mapping to device
    """
    def conv2d(self, in_channels, out_channels, kernel_size=(3,3), dilation=1, groups=1, padding=1, bias=False, padding_mode="zeros"):
      return [nn.Conv2d(in_channels=in_channels, out_channels=out_channels, kernel_size=kernel_size, groups=groups, dilation=dilation, padding=padding, bias=bias, padding_mode=padding_mode)]

    def separable_conv2d(self, in_channels, out_channels, kernel_size=(3,3), dilation=1, padding=1, bias=False, padding_mode="zeros"):
      return [nn.Conv2d(in_channels=in_channels, out_channels=in_channels, kernel_size=kernel_size, groups=in_channels, dilation=dilation, padding=padding, bias=bias, padding_mode=padding_mode),
              nn.Conv2d(in_channels=in_channels, out_channels=out_channels, kernel_size=(1,1), bias=bias)]

    def activate(self, l, out_channels, bn=True, dropout=0, relu=True):
      if bn:
        l.append(nn.BatchNorm2d(out_channels))
      if dropout>0:
        l.append(nn.Dropout(dropout))
      if relu:
        l.append(nn.ReLU())

      return nn.Sequential(*l)

    def create_conv2d(self, in_channels, out_channels, kernel_size=(3,3), dilation=1, groups=1, padding=1, bias=False, bn=True, dropout=0, relu=True, padding_mode="zeros"):
      return self.activate(self.conv2d(in_channels=in_channels, out_channels=out_channels, kernel_size=kernel_size, groups=groups, dilation=dilation, padding=padding, bias=bias, padding_mode=padding_mode), out_channels, bn, dropout, relu)

    def create_depthwise_conv2d(self, in_channels, out_channels, kernel_size=(3,3), dilation=1, padding=1, bias=False, bn=True, dropout=0, relu=True, padding_mode="zeros"):
      return self.activate(self.separable_conv2d(in_channels=in_channels, out_channels=out_channels, kernel_size=kernel_size, dilation=dilation, padding=padding, bias=bias, padding_mode=padding_mode),
                 out_channels, bn, dropout, relu)

    def __init__(self, name="Model"):
        super(Net, self).__init__()
        self.trainer = None
        self.name = name

    def summary(self, input_size): #input_size=(1, 28, 28)
      summary(self, input_size=input_size)

    def gotrain(self, optimizer, train_loader, test_loader, epochs, statspath, scheduler=None, batch_scheduler=False, L1lambda=0):
      self.trainer = ModelTrainer(self, optimizer, train_loader, test_loader, statspath, scheduler, batch_scheduler, L1lambda)
      self.trainer.run(epochs)

    def stats(self):
      return self.trainer.stats if self.trainer else None

class DNN15(Net):
    def __init__(self, name="Model", dropout_value=0):
      self.num_channels=3
      super(DNN15, self).__init__(name)
      self.conv1=nn.Sequential(nn.Conv2d(3,32,3,padding=1,bias=False))
      self.conv2=nn.Sequential(nn.BatchNorm2d(32),nn.ReLU(),nn.Conv2d(32,64,3,padding=1,bias=False))
      self.pool=nn.MaxPool2d(2)
      self.conv3=nn.Sequential(nn.Conv2d(64,128,3,padding=1,bias=False))
      self.conv4=nn.Sequential(nn.Conv2d(128,256,3,padding=1,bias=False))
      self.conv5=nn.Sequential(nn.Conv2d(256,512,3,padding=1,bias=False))
      self.conv6=nn.Sequential(nn.Conv2d(512,1024,3,padding=1,bias=False))
      self.conv7=nn.Sequential(nn.Conv2d(1024,1024,3,padding=1,bias=False))
      self.conv8=nn.Conv2d(1024,4,1)


    def forward(self, x):
      x1 = self.conv1(x)
      x2 = self.conv2(x1)
      x3 = self.pool(x2)
      x4 = self.conv3(x3)
      x5 = self.pool(x4)
      x6 = self.conv4(x5)
      x7 = self.pool(x6)
      x8 = self.conv5(x7)
      x9 = self.pool(x8)
      x10 = self.conv6(x9)
      x11 = self.pool(x2)
      x12 = self.conv7(x3)

    
      out = F.adaptive_avg_pool2d(x12, 1)
      out = self.conv8(out)
      out = out.view(128, 128)
      return F.log_softmax(out, dim=-1)

